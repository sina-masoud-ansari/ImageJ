<!-- Ant makefile for ImageJ -->
<project name="ImageJ" default="test" basedir=".">
	<property name="src.main" location="src/main"/>
	<property name="src.test" location="src/test"/>
	<property name="reports.test" location="reports"/>
	<property name="build.dir" location="build"/>
	<property name="lib.dir" location="lib"/>
	<property name="bin.dir" location="bin"/>
	<property name="plugins.dir" location="plugins"/>
	<property name="macros.dir" location="macros"/>
	<property name="sample.dir" location="${build.dir}/resources/images/sample"/>
	<property name="num.samples" value="10" />
	<property name="reports.dir" location="reports"/>
	<property name="results.dir" location="results"/>	
	<property name="resources.build" location="resources/build"/>
	<property name="resources.test" location="resources/test" />
	<property name="hexa.rt" location="/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/rt.jar" />
	<property name="memory.max" value="2048m" />

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib-0.6.jar"/>
		</classpath>
	</taskdef>

	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="run.classpath">
		<fileset dir="${bin.dir}">
			<include name="**/*.jar" />
		</fileset>	
	</path>
	<!--
	<target name="compile_test" description="Compile everything">
		<mkdir dir="${build.dir}" />
		<javac destdir="${build.dir}" classpathref="build.classpath" optimize="on" source="1.6" target="1.6" debug="on" encoding="UTF-8">
			<src path="${src.main}"/>
			<src path="${src.test}"/>
		</javac>
	</target>
-->

	<target name="compile" description="Compile everything">
		<!-- First, ensure the build directory exists. -->
		<mkdir dir="${build.dir}" />
		<!-- Build everything; add debug="on" to debug -->
		<!-- If compiling on hexa.ece.auckland.ac.nz use bootclasspath parameter -->
		<if>
			<available file="${hexa.rt}"/>
			<then>
				<javac destdir="${build.dir}" classpathref="build.classpath" optimize="on" source="1.6" target="1.6" debug="on" encoding="UTF-8" bootclasspath="/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/rt.jar">
					<src path="${src.main}"/>
					<src path="${src.test}"/>
					<compilerarg value="-Xbootclasspath/p:${lib.dir}/jsr166.jar"/>
				</javac>
			</then>
			<else>
				<javac destdir="${build.dir}" classpathref="build.classpath" optimize="on" source="1.6" target="1.6" debug="on" encoding="UTF-8">
					<src path="${src.main}"/>
					<src path="${src.test}"/>
					<compilerarg value="-Xbootclasspath/p:${lib.dir}/jsr166.jar"/>
				</javac>
			</else>
		</if>

	</target>

	<target name="build" depends="compile" description="Build ij.jar.">
		<!-- Copy needed files into the build directory. -->
		<copy file="${resources.build}/IJ_Props.txt" todir="${build.dir}" />
		<copy file="${resources.build}/images/microscope.gif" tofile="${build.dir}/microscope.gif" />
		<copy file="${resources.build}/images/about.jpg" tofile="${build.dir}/about.jpg" />
		<copy file="${resources.build}/plugins/MacAdapter.class" tofile="${build.dir}/MacAdapter.class" />
		<copy file="${resources.build}/plugins/JavaScriptEvaluator.class" tofile="${build.dir}/JavaScriptEvaluator.class" />
		<copy file="${resources.build}/plugins/MacClipboard.class" tofile="${build.dir}/MacClipboard.class" />
		<copy todir="${build.dir}/macros">
			<fileset dir="${resources.build}/macros"/>
		</copy>
		<!-- Build ij.jar. -->
		<mkdir dir="${bin.dir}" />
		<copy todir="${build.dir}/macros">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>	
        <copy todir="${bin.dir}">
                <fileset dir="${lib.dir}">
                        <include name="**/*.jar" />
                </fileset>
        </copy>		
		<jar jarfile="${bin.dir}/ij.jar" basedir="${build.dir}" manifest="MANIFEST.MF" />
	</target>

	<target name="clean" description="Delete the build files.">
		<delete dir="${build.dir}" />
		<delete dir="${bin.dir}" />
	</target>

	<target name="headless" depends="build" description="Build and run ImageJ in headless mode">
		<java maxmemory="${memory.max}" classpathref="run.classpath" classname="ij.ImageJ" fork="yes">
			<arg value="-batch" />
		</java>
	</target>

	<target name="test" depends="build" description="Compile source and initiate tests">
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${build.dir}/resources" />
		<copy todir="${build.dir}/resources">
			<fileset dir="${resources.test}" />
		</copy>
		<junit maxmemory="${memory.max}" printsummary="withOutAndErr" haltonfailure="yes">
			<jvmarg value="-Xbootclasspath/p:${lib.dir}/jsr166.jar" />
			<classpath path="${build.dir}" />
			<classpath refid="build.classpath" />
			<classpath refid="run.classpath" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.test}">
				<fileset dir="${src.test}">
					<include name="**/*Test*.java" />
					<!-- <exclude name="**/AllTests.java"/> -->
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${reports.test}">
			<fileset dir="${reports.test}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${reports.test}" />
		</junitreport>
	</target>

	<target name="test-debug" depends="build" description="Compile source and initiate tests">
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${build.dir}/dump" />
		<mkdir dir="${build.dir}/resources" />
		<copy todir="${build.dir}/resources">
			<fileset dir="${resources.test}" />
		</copy>
		<junit maxmemory="${memory.max}" printsummary="withOutAndErr" haltonfailure="yes">
			<jvmarg value="-Xbootclasspath/p:${lib.dir}/jsr166.jar" />
			<jvmarg value="-Xdebug" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" />
			<classpath path="${build.dir}" />
			<classpath refid="build.classpath" />
			<classpath refid="run.classpath" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.test}">
				<fileset dir="${src.test}">
					<include name="**/*Test*.java" />
					<!-- <exclude name="**/AllTests.java"/> -->
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${reports.test}">
			<fileset dir="${reports.test}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${reports.test}" />
		</junitreport>
	</target>


	<target name="run" depends="build" description="Build and run ImageJ.">
		<java maxmemory="${memory.max}" classpathref="run.classpath" jar="${bin.dir}/ij.jar" fork="yes">
			<jvmarg value="-Xbootclasspath/p:${lib.dir}/jsr166.jar" />
		</java>
	</target>

	<target name="debug" depends="build" description="Build and debug ImageJ.">
		<java maxmemory="${memory.max}" jar="${bin.dir}/ij.jar" fork="yes">
			<jvmarg value="-Xbootclasspath/p:${lib.dir}/jsr166.jar" />
			<jvmarg value="-Xdebug" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" />
		</java>
	</target>

	<condition property="os" value="unix">
		<os family="unix"/>
	</condition>
	<condition property="os" value="windows">
		<os family="windows"/>
	</condition>

	<target name="performance" depends="clean, test" description="Initiate performance testing">
		<delete dir="${results.dir}" />
		<mkdir dir="${results.dir}" />
		<echo message="${os.name} ${os.arch}" />
		<if>
			<equals arg1="${os}" arg2="windows" />
			<then>
				<!-- see http://ant.apache.org/manual/Tasks/exec.html -->
				<exec executable="cmd">
					<arg value="/c"/>
					<arg value="performance.bat"/>
					<arg value="${bin.dir}"/>
					<arg value="${results.dir}"/>
					<arg value="${memory.max}"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os}" arg2="unix" />
				<then>
					<exec executable="bash">
						<arg value="performance.sh"/>
						<arg value="${bin.dir}"/>
						<arg value="${results.dir}"/>
						<arg value="${memory.max}"/>
						<arg value="${sample.dir}"/>
						<arg value="${num.samples}"/>
						<arg value="${lib.dir}/jsr166.jar"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>
	
	<target name="performance-small" depends="clean, test" description="Initiate performance testing">
		<delete dir="${results.dir}" />
		<mkdir dir="${results.dir}" />
		<echo message="${os.name} ${os.arch}" />
		<if>
			<equals arg1="${os}" arg2="windows" />
			<then>
				<!-- see http://ant.apache.org/manual/Tasks/exec.html -->
				<exec executable="cmd">
					<arg value="/c"/>
					<arg value="performance.bat"/>
					<arg value="${bin.dir}"/>
					<arg value="${results.dir}"/>
					<arg value="${memory.max}"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os}" arg2="unix" />
				<then>
					<exec executable="bash">
						<arg value="performance.sh"/>
						<arg value="${bin.dir}"/>
						<arg value="${results.dir}"/>
						<arg value="${memory.max}"/>
						<arg value="${sample.dir}"/>
						<arg value="2"/>
						<arg value="${lib.dir}/jsr166.jar"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>	
	
	<target name="cluster-performance" depends="clean, build" description="Initiate performance testing on NeSI cluster">
		<delete dir="${results.dir}" />
		<mkdir dir="${results.dir}" />
		<echo message="${os.name} ${os.arch}" />
		<if>
			<equals arg1="${os}" arg2="windows" />
			<then>
				<echo message="Not implemented on ${os.name}" />
			</then>
			<elseif>
				<equals arg1="${os}" arg2="unix" />
				<then>
					<exec executable="bash">
						<arg value="cluster-performance.sh"/>
						<arg value="${bin.dir}"/>
						<arg value="${results.dir}"/>
						<arg value="${memory.max}"/>
						<!--<arg value="${sample.dir}"/> -->
						<arg value="../sample_images"/>
						<arg value="${num.samples}"/>
						<arg value="${lib.dir}/jsr166.jar"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>	

	<!-- NOT USED -->
	<target name="javadocs" description="Build the JavaDocs.">
		<delete dir="../api" />
		<mkdir dir="../api" />
		<javadoc 
           sourcepath="."
           packagenames="ij.*"
           destdir="../api"
           author="true"
           version="true"
           use="true"
           windowtitle="ImageJ API">
		</javadoc>
	</target>

</project>

